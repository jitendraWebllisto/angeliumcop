/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import Typed from 'typed.js';
var NgxTypedJsComponent = /** @class */ (function () {
    function NgxTypedJsComponent() {
        this.completed = new EventEmitter();
        this.preStringTyped = new EventEmitter();
        this.stringTyped = new EventEmitter();
        this.lastStringBackspaced = new EventEmitter();
        this.typingPaused = new EventEmitter();
        this.typingResumed = new EventEmitter();
        this.reset = new EventEmitter();
        this.stopped = new EventEmitter();
        this.started = new EventEmitter();
        this.destroyed = new EventEmitter();
    }
    /**
     * @return {?}
     */
    NgxTypedJsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.typed = new Typed(this.content.nativeElement.querySelector('.typing'), this.options);
    };
    /**
     * @return {?}
     */
    NgxTypedJsComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.showCursor !== false) {
            this.updateCursorStyle();
        }
    };
    /**
     * @return {?}
     */
    NgxTypedJsComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.typed.toggle();
    };
    /**
     * @return {?}
     */
    NgxTypedJsComponent.prototype.stop = /**
     * @return {?}
     */
    function () {
        this.typed.stop();
    };
    /**
     * @return {?}
     */
    NgxTypedJsComponent.prototype.start = /**
     * @return {?}
     */
    function () {
        this.typed.start();
    };
    /**
     * @return {?}
     */
    NgxTypedJsComponent.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.typed.destroy();
    };
    /**
     * @param {?=} restart
     * @return {?}
     */
    NgxTypedJsComponent.prototype.doReset = /**
     * @param {?=} restart
     * @return {?}
     */
    function (restart) {
        this.typed.reset(restart);
    };
    Object.defineProperty(NgxTypedJsComponent.prototype, "options", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var emit = function (emitter) { return function () { return emitter.emit(); }; };
            /** @type {?} */
            var emitIndex = function (emitter) { return function (index) { return emitter.emit(index); }; };
            /** @type {?} */
            var opts = (/** @type {?} */ ({
                strings: this.strings,
                stringsElement: this.stringsElement,
                typeSpeed: this.typeSpeed,
                startDelay: this.startDelay,
                backSpeed: this.backSpeed,
                smartBackspace: this.smartBackspace,
                shuffle: this.shuffle,
                backDelay: this.backDelay,
                fadeOut: this.fadeOut,
                fadeOutClass: this.fadeOutClass,
                fadeOutDelay: this.fadeOutDelay,
                loop: this.loop,
                loopCount: this.loopCount,
                showCursor: this.showCursor,
                autoInsertCss: this.autoInsertCss,
                attr: this.attr,
                bindInputFocusEvents: this.bindInputFocusEvents,
                contentType: this.contentType,
                onComplete: emit(this.completed),
                preStringTyped: emitIndex(this.preStringTyped),
                onStringTyped: emitIndex(this.stringTyped),
                onLastStringBackspaced: emit(this.lastStringBackspaced),
                onTypingPaused: emitIndex(this.typingPaused),
                onTypingResumed: emitIndex(this.typingResumed),
                onReset: emit(this.reset),
                onStop: emitIndex(this.stopped),
                onStart: emitIndex(this.started),
                onDestroy: emit(this.destroyed),
            }));
            Object.keys(opts).forEach(function (key) {
                if (opts[key] === undefined) {
                    delete opts[key];
                }
            });
            return opts;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    NgxTypedJsComponent.prototype.updateCursorStyle = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var textElementStyle = getComputedStyle(this.content.nativeElement.querySelector('.typing'));
        /** @type {?} */
        var cursorElementStyle = this.content.nativeElement.querySelector('.typed-cursor').style;
        cursorElementStyle.fontSize = textElementStyle.fontSize;
        cursorElementStyle.color = this.cursorColor || textElementStyle.color;
    };
    NgxTypedJsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-typed-js',
                    template: "<div #wrapper>\n  <ng-content></ng-content>\n</div>\n",
                    styles: [":host>>>.typing{display:inline}"]
                }] }
    ];
    NgxTypedJsComponent.propDecorators = {
        cursorColor: [{ type: Input }],
        strings: [{ type: Input }],
        stringsElement: [{ type: Input }],
        typeSpeed: [{ type: Input }],
        startDelay: [{ type: Input }],
        backSpeed: [{ type: Input }],
        smartBackspace: [{ type: Input }],
        shuffle: [{ type: Input }],
        backDelay: [{ type: Input }],
        fadeOut: [{ type: Input }],
        fadeOutClass: [{ type: Input }],
        fadeOutDelay: [{ type: Input }],
        loop: [{ type: Input }],
        loopCount: [{ type: Input }],
        showCursor: [{ type: Input }],
        cursorChar: [{ type: Input }],
        autoInsertCss: [{ type: Input }],
        attr: [{ type: Input }],
        bindInputFocusEvents: [{ type: Input }],
        contentType: [{ type: Input }],
        completed: [{ type: Output }],
        preStringTyped: [{ type: Output }],
        stringTyped: [{ type: Output }],
        lastStringBackspaced: [{ type: Output }],
        typingPaused: [{ type: Output }],
        typingResumed: [{ type: Output }],
        reset: [{ type: Output }],
        stopped: [{ type: Output }],
        started: [{ type: Output }],
        destroyed: [{ type: Output }],
        content: [{ type: ViewChild, args: ['wrapper',] }]
    };
    return NgxTypedJsComponent;
}());
export { NgxTypedJsComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.cursorColor;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.strings;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.stringsElement;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.typeSpeed;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.startDelay;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.backSpeed;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.smartBackspace;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.shuffle;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.backDelay;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.fadeOut;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.fadeOutClass;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.fadeOutDelay;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.loop;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.loopCount;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.showCursor;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.cursorChar;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.autoInsertCss;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.attr;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.bindInputFocusEvents;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.contentType;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.completed;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.preStringTyped;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.stringTyped;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.lastStringBackspaced;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.typingPaused;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.typingResumed;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.reset;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.stopped;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.started;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.destroyed;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.typed;
    /**
     * @type {?}
     * @private
     */
    NgxTypedJsComponent.prototype.content;
}
//# sourceMappingURL=data:application/json;base64,