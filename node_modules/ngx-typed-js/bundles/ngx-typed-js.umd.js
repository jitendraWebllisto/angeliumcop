(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('typed.js')) :
    typeof define === 'function' && define.amd ? define('ngx-typed-js', ['exports', '@angular/core', 'typed.js'], factory) :
    (global = global || self, factory(global['ngx-typed-js'] = {}, global.ng.core, global.Typed));
}(this, function (exports, core, Typed) { 'use strict';

    Typed = Typed && Typed.hasOwnProperty('default') ? Typed['default'] : Typed;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxTypedJsComponent = /** @class */ (function () {
        function NgxTypedJsComponent() {
            this.completed = new core.EventEmitter();
            this.preStringTyped = new core.EventEmitter();
            this.stringTyped = new core.EventEmitter();
            this.lastStringBackspaced = new core.EventEmitter();
            this.typingPaused = new core.EventEmitter();
            this.typingResumed = new core.EventEmitter();
            this.reset = new core.EventEmitter();
            this.stopped = new core.EventEmitter();
            this.started = new core.EventEmitter();
            this.destroyed = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        NgxTypedJsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.typed = new Typed(this.content.nativeElement.querySelector('.typing'), this.options);
        };
        /**
         * @return {?}
         */
        NgxTypedJsComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (this.showCursor !== false) {
                this.updateCursorStyle();
            }
        };
        /**
         * @return {?}
         */
        NgxTypedJsComponent.prototype.toggle = /**
         * @return {?}
         */
        function () {
            this.typed.toggle();
        };
        /**
         * @return {?}
         */
        NgxTypedJsComponent.prototype.stop = /**
         * @return {?}
         */
        function () {
            this.typed.stop();
        };
        /**
         * @return {?}
         */
        NgxTypedJsComponent.prototype.start = /**
         * @return {?}
         */
        function () {
            this.typed.start();
        };
        /**
         * @return {?}
         */
        NgxTypedJsComponent.prototype.destroy = /**
         * @return {?}
         */
        function () {
            this.typed.destroy();
        };
        /**
         * @param {?=} restart
         * @return {?}
         */
        NgxTypedJsComponent.prototype.doReset = /**
         * @param {?=} restart
         * @return {?}
         */
        function (restart) {
            this.typed.reset(restart);
        };
        Object.defineProperty(NgxTypedJsComponent.prototype, "options", {
            get: /**
             * @private
             * @return {?}
             */
            function () {
                /** @type {?} */
                var emit = function (emitter) { return function () { return emitter.emit(); }; };
                /** @type {?} */
                var emitIndex = function (emitter) { return function (index) { return emitter.emit(index); }; };
                /** @type {?} */
                var opts = (/** @type {?} */ ({
                    strings: this.strings,
                    stringsElement: this.stringsElement,
                    typeSpeed: this.typeSpeed,
                    startDelay: this.startDelay,
                    backSpeed: this.backSpeed,
                    smartBackspace: this.smartBackspace,
                    shuffle: this.shuffle,
                    backDelay: this.backDelay,
                    fadeOut: this.fadeOut,
                    fadeOutClass: this.fadeOutClass,
                    fadeOutDelay: this.fadeOutDelay,
                    loop: this.loop,
                    loopCount: this.loopCount,
                    showCursor: this.showCursor,
                    autoInsertCss: this.autoInsertCss,
                    attr: this.attr,
                    bindInputFocusEvents: this.bindInputFocusEvents,
                    contentType: this.contentType,
                    onComplete: emit(this.completed),
                    preStringTyped: emitIndex(this.preStringTyped),
                    onStringTyped: emitIndex(this.stringTyped),
                    onLastStringBackspaced: emit(this.lastStringBackspaced),
                    onTypingPaused: emitIndex(this.typingPaused),
                    onTypingResumed: emitIndex(this.typingResumed),
                    onReset: emit(this.reset),
                    onStop: emitIndex(this.stopped),
                    onStart: emitIndex(this.started),
                    onDestroy: emit(this.destroyed),
                }));
                Object.keys(opts).forEach(function (key) {
                    if (opts[key] === undefined) {
                        delete opts[key];
                    }
                });
                return opts;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @return {?}
         */
        NgxTypedJsComponent.prototype.updateCursorStyle = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var textElementStyle = getComputedStyle(this.content.nativeElement.querySelector('.typing'));
            /** @type {?} */
            var cursorElementStyle = this.content.nativeElement.querySelector('.typed-cursor').style;
            cursorElementStyle.fontSize = textElementStyle.fontSize;
            cursorElementStyle.color = this.cursorColor || textElementStyle.color;
        };
        NgxTypedJsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-typed-js',
                        template: "<div #wrapper>\n  <ng-content></ng-content>\n</div>\n",
                        styles: [":host>>>.typing{display:inline}"]
                    }] }
        ];
        NgxTypedJsComponent.propDecorators = {
            cursorColor: [{ type: core.Input }],
            strings: [{ type: core.Input }],
            stringsElement: [{ type: core.Input }],
            typeSpeed: [{ type: core.Input }],
            startDelay: [{ type: core.Input }],
            backSpeed: [{ type: core.Input }],
            smartBackspace: [{ type: core.Input }],
            shuffle: [{ type: core.Input }],
            backDelay: [{ type: core.Input }],
            fadeOut: [{ type: core.Input }],
            fadeOutClass: [{ type: core.Input }],
            fadeOutDelay: [{ type: core.Input }],
            loop: [{ type: core.Input }],
            loopCount: [{ type: core.Input }],
            showCursor: [{ type: core.Input }],
            cursorChar: [{ type: core.Input }],
            autoInsertCss: [{ type: core.Input }],
            attr: [{ type: core.Input }],
            bindInputFocusEvents: [{ type: core.Input }],
            contentType: [{ type: core.Input }],
            completed: [{ type: core.Output }],
            preStringTyped: [{ type: core.Output }],
            stringTyped: [{ type: core.Output }],
            lastStringBackspaced: [{ type: core.Output }],
            typingPaused: [{ type: core.Output }],
            typingResumed: [{ type: core.Output }],
            reset: [{ type: core.Output }],
            stopped: [{ type: core.Output }],
            started: [{ type: core.Output }],
            destroyed: [{ type: core.Output }],
            content: [{ type: core.ViewChild, args: ['wrapper',] }]
        };
        return NgxTypedJsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxTypedJsModule = /** @class */ (function () {
        function NgxTypedJsModule() {
        }
        NgxTypedJsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [NgxTypedJsComponent],
                        imports: [],
                        exports: [NgxTypedJsComponent]
                    },] }
        ];
        return NgxTypedJsModule;
    }());

    exports.NgxTypedJsModule = NgxTypedJsModule;
    exports.Éµa = NgxTypedJsComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ngx-typed-js.umd.js.map
