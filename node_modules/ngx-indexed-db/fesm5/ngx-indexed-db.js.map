{"version":3,"file":"ngx-indexed-db.js","sources":["ng://ngx-indexed-db/lib/ngx-indexed-db.ts","ng://ngx-indexed-db/utils/index.ts","ng://ngx-indexed-db/lib/ngx-indexed-db.service.ts","ng://ngx-indexed-db/lib/ngxindexeddb.module.ts"],"sourcesContent":["export interface ObjectStoreMeta {\n\tstore: string;\n\tstoreConfig: { keyPath: string; autoIncrement: boolean; [key: string]: any };\n\tstoreSchema: ObjectStoreSchema[];\n}\n\nexport interface ObjectStoreSchema {\n\tname: string;\n\tkeypath: string | string[];\n\toptions: { unique: boolean; [key: string]: any };\n}\nexport type Key = string | number | Date | ArrayBufferView | ArrayBuffer | IDBArrayKey | IDBKeyRange;\nexport interface IndexDetails {\n\tindexName: string;\n\torder: string;\n}\nexport interface RequestEventTarget<T> extends EventTarget {\n\tresult: T | T[];\n}\n\nexport interface RequestEvent<T> extends Event {\n\ttarget: RequestEventTarget<T>;\n}\n\nconst indexedDB: IDBFactory =\n\twindow.indexedDB || (<any>window).mozIndexedDB || (<any>window).webkitIndexedDB || (<any>window).msIndexedDB;\n\nexport function openDatabase(dbName: string, version: number, upgradeCallback?: Function) {\n\treturn new Promise<IDBDatabase>((resolve, reject) => {\n\t\tconst request = indexedDB.open(dbName, version);\n\t\tlet db: IDBDatabase;\n\t\trequest.onsuccess = (event: Event) => {\n\t\t\tdb = request.result;\n\t\t\tresolve(db);\n\t\t};\n\t\trequest.onerror = (event: Event) => {\n\t\t\treject(`IndexedDB error: ${request.error}`);\n\t\t};\n\t\tif (typeof upgradeCallback === 'function') {\n\t\t\trequest.onupgradeneeded = (event: Event) => {\n\t\t\t\tconsole.log('checkout');\n\t\t\t\tupgradeCallback(event, db);\n\t\t\t};\n\t\t}\n\t});\n}\n\nexport function CreateObjectStore(\n\tdbName: string,\n\tversion: number,\n\tstoreSchemas: ObjectStoreMeta[],\n\tmigrationFactory?: () => { [key: number]: (db: IDBDatabase, transaction: IDBTransaction) => void }\n) {\n\tconst request: IDBOpenDBRequest = indexedDB.open(dbName, version);\n\n\trequest.onupgradeneeded = function(event: IDBVersionChangeEvent) {\n\t\tconst database: IDBDatabase = (event.target as any).result;\n\n\t\tstoreSchemas.forEach((storeSchema: ObjectStoreMeta) => {\n\t\t\tif (!database.objectStoreNames.contains(storeSchema.store)) {\n\t\t\t\tconst objectStore = database.createObjectStore(storeSchema.store, storeSchema.storeConfig);\n\t\t\t\tstoreSchema.storeSchema.forEach((schema: ObjectStoreSchema) => {\n\t\t\t\t\tobjectStore.createIndex(schema.name, schema.keypath, schema.options);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\tconst storeMigrations = migrationFactory && migrationFactory();\n\t\tif (storeMigrations) {\n\t\t\tObject.keys(storeMigrations)\n\t\t\t\t.map(k => parseInt(k, 10))\n\t\t\t\t.filter(v => v > event.oldVersion)\n\t\t\t\t.sort((a, b) => a - b)\n\t\t\t\t.forEach(v => {\n\t\t\t\t\tstoreMigrations[v](database, request.transaction);\n\t\t\t\t});\n\t\t}\n\n\t\tdatabase.close();\n\t};\n\n\trequest.onsuccess = function(e: any) {\n\t\te.target.result.close();\n\t};\n}\n\nexport enum DBMode {\n\treadonly = 'readonly',\n\treadwrite = 'readwrite'\n}\n","export interface Options {\n\tstoreName: string;\n\tdbMode: IDBTransactionMode;\n\terror: (e: Event) => any;\n\tcomplete: (e: Event) => any;\n\tabort?: any;\n}\n\nexport function validateStoreName(db: IDBDatabase, storeName: string) {\n\treturn db.objectStoreNames.contains(storeName);\n}\n\nexport function validateBeforeTransaction(db: IDBDatabase, storeName: string, reject: Function) {\n\tif (!db) {\n\t\treject('You need to use the openDatabase function to create a database before you query it!');\n\t}\n\tif (!validateStoreName(db, storeName)) {\n\t\treject(`objectStore does not exists: ${storeName}`);\n\t}\n}\n\nexport function createTransaction(db: IDBDatabase, options: Options): IDBTransaction {\n\tlet trans: IDBTransaction = db.transaction(options.storeName, options.dbMode);\n\ttrans.onerror = options.error;\n\ttrans.oncomplete = options.complete;\n\ttrans.onabort = options.abort;\n\treturn trans;\n}\n\nexport function optionsGenerator(type: any, storeName: any, reject: Function, resolve: Function): Options {\n\treturn {\n\t\tstoreName: storeName,\n\t\tdbMode: type,\n\t\terror: (e: Event) => {\n\t\t\treject(e);\n\t\t},\n\t\tcomplete: (e: Event) => {\n\t\t\tresolve();\n\t\t},\n\t\tabort: (e: Event) => {\n\t\t\treject(e);\n\t\t}\n\t};\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { CONFIG_TOKEN, DBConfig } from './ngxindexeddb.module';\nimport { openDatabase, DBMode, Key, RequestEvent, CreateObjectStore } from './ngx-indexed-db';\nimport { createTransaction, optionsGenerator, validateBeforeTransaction } from '../utils';\n\n@Injectable()\nexport class NgxIndexedDBService {\n\tset currentStore(_currentStore: string) {\n\t\tthis._currentStore = _currentStore;\n\t}\n\tprivate _currentStore: string;\n\n\tconstructor(@Inject(CONFIG_TOKEN) private dbConfig: DBConfig) {\n\t\tif (!dbConfig.name) {\n\t\t\tthrow new Error('NgxIndexedDB: Please, provide the dbName in the configuration');\n\t\t}\n\t\tif (!dbConfig.version) {\n\t\t\tthrow new Error('NgxIndexedDB: Please, provide the db version in the configuration');\n\t\t}\n\t\tCreateObjectStore(dbConfig.name, dbConfig.version, dbConfig.objectStoresMeta, dbConfig.migrationFactory);\n\t}\n\n\tadd<T>(value: T, key?: any) {\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\topenDatabase(this.dbConfig.name, this.dbConfig.version).then((db: IDBDatabase) => {\n\t\t\t\tlet transaction = createTransaction(\n\t\t\t\t\t\tdb,\n\t\t\t\t\t\toptionsGenerator(DBMode.readwrite, this._currentStore, reject, resolve)\n\t\t\t\t\t),\n\t\t\t\t\tobjectStore = transaction.objectStore(this._currentStore);\n\t\t\t\tlet request = objectStore.add(value, key);\n\t\t\t\trequest.onsuccess = (evt: any) => {\n\t\t\t\t\tkey = evt.target.result;\n\t\t\t\t\tresolve(key);\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\tgetByKey<T>(key: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.dbConfig.name, this.dbConfig.version).then((db: IDBDatabase) => {\n\t\t\t\tlet transaction = createTransaction(\n\t\t\t\t\t\tdb,\n\t\t\t\t\t\toptionsGenerator(DBMode.readonly, this._currentStore, reject, resolve)\n\t\t\t\t\t),\n\t\t\t\t\tobjectStore = transaction.objectStore(this._currentStore);\n\t\t\t\tlet request = objectStore.get(key);\n\t\t\t\trequest.onsuccess = function(event: Event) {\n\t\t\t\t\tresolve((<any>event.target).result);\n\t\t\t\t};\n\t\t\t\trequest.onerror = function(event: Event) {\n\t\t\t\t\treject(event);\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\tgetByID<T>(id: string | number) {\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\topenDatabase(this.dbConfig.name, this.dbConfig.version).then((db: IDBDatabase) => {\n\t\t\t\tvalidateBeforeTransaction(db, this._currentStore, reject);\n\t\t\t\tlet transaction = createTransaction(\n\t\t\t\t\t\tdb,\n\t\t\t\t\t\toptionsGenerator(DBMode.readonly, this._currentStore, reject, resolve)\n\t\t\t\t\t),\n\t\t\t\t\tobjectStore = transaction.objectStore(this._currentStore),\n\t\t\t\t\trequest: IDBRequest;\n\t\t\t\trequest = objectStore.get(+id);\n\t\t\t\trequest.onsuccess = function(event: Event) {\n\t\t\t\t\tresolve((event.target as any).result as T);\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\tgetAll<T>() {\n\t\treturn new Promise<T[]>((resolve, reject) => {\n\t\t\topenDatabase(this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, this._currentStore, reject);\n\t\t\t\tlet transaction = createTransaction(\n\t\t\t\t\t\tdb,\n\t\t\t\t\t\toptionsGenerator(DBMode.readonly, this._currentStore, reject, resolve)\n\t\t\t\t\t),\n\t\t\t\t\tobjectStore = transaction.objectStore(this._currentStore),\n\t\t\t\t\tresult: Array<any> = [];\n\n\t\t\t\tconst request: IDBRequest = objectStore.getAll();\n\n\t\t\t\trequest.onerror = function(e) {\n\t\t\t\t\treject(e);\n\t\t\t\t};\n\t\t\t\trequest.onsuccess = function({ target: { result: ResultAll } }: RequestEvent<T>) {\n\t\t\t\t\tresolve(ResultAll as T[]);\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\tupdate<T>(value: T, key?: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, this._currentStore, reject);\n\t\t\t\tlet transaction = createTransaction(\n\t\t\t\t\t\tdb,\n\t\t\t\t\t\toptionsGenerator(DBMode.readwrite, this._currentStore, reject, resolve)\n\t\t\t\t\t),\n\t\t\t\t\tobjectStore = transaction.objectStore(this._currentStore);\n\t\t\t\ttransaction.oncomplete = event => {\n\t\t\t\t\tresolve(event);\n\t\t\t\t};\n\t\t\t\tobjectStore.put(value, key);\n\t\t\t});\n\t\t});\n\t}\n\n\tdeleteRecord(key: Key) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, this._currentStore, reject);\n\t\t\t\tlet transaction = createTransaction(\n\t\t\t\t\t\tdb,\n\t\t\t\t\t\toptionsGenerator(DBMode.readwrite, this._currentStore, reject, resolve)\n\t\t\t\t\t),\n\t\t\t\t\tobjectStore = transaction.objectStore(this._currentStore);\n\t\t\t\tlet request = objectStore.delete(key);\n\t\t\t\trequest.onsuccess = event => {\n\t\t\t\t\tresolve(event);\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\tclear() {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, this._currentStore, reject);\n\t\t\t\tlet transaction = createTransaction(\n\t\t\t\t\t\tdb,\n\t\t\t\t\t\toptionsGenerator(DBMode.readwrite, this._currentStore, reject, resolve)\n\t\t\t\t\t),\n\t\t\t\t\tobjectStore = transaction.objectStore(this._currentStore);\n\t\t\t\tobjectStore.clear();\n\t\t\t\ttransaction.oncomplete = event => {\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\tdelete(key: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, this._currentStore, reject);\n\t\t\t\tlet transaction = createTransaction(\n\t\t\t\t\t\tdb,\n\t\t\t\t\t\toptionsGenerator(DBMode.readwrite, this._currentStore, reject, resolve)\n\t\t\t\t\t),\n\t\t\t\t\tobjectStore = transaction.objectStore(this._currentStore);\n\t\t\t\tobjectStore['delete'](key);\n\t\t\t});\n\t\t});\n\t}\n\n\topenCursor(cursorCallback: (event: Event) => void, keyRange?: IDBKeyRange) {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\topenDatabase(this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, this._currentStore, reject);\n\t\t\t\tlet transaction = createTransaction(\n\t\t\t\t\t\tdb,\n\t\t\t\t\t\toptionsGenerator(DBMode.readonly, this._currentStore, reject, resolve)\n\t\t\t\t\t),\n\t\t\t\t\tobjectStore = transaction.objectStore(this._currentStore),\n\t\t\t\t\trequest = objectStore.openCursor(keyRange);\n\n\t\t\t\trequest.onsuccess = (event: Event) => {\n\t\t\t\t\tcursorCallback(event);\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n\n\tgetByIndex(indexName: string, key: any) {\n\t\treturn new Promise<any>((resolve, reject) => {\n\t\t\topenDatabase(this.dbConfig.name, this.dbConfig.version).then(db => {\n\t\t\t\tvalidateBeforeTransaction(db, this._currentStore, reject);\n\t\t\t\tlet transaction = createTransaction(\n\t\t\t\t\t\tdb,\n\t\t\t\t\t\toptionsGenerator(DBMode.readonly, this._currentStore, reject, resolve)\n\t\t\t\t\t),\n\t\t\t\t\tobjectStore = transaction.objectStore(this._currentStore),\n\t\t\t\t\tindex = objectStore.index(indexName),\n\t\t\t\t\trequest = index.get(key);\n\t\t\t\trequest.onsuccess = (event: Event) => {\n\t\t\t\t\tresolve((<IDBOpenDBRequest>event.target).result);\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t}\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NgxIndexedDBService } from './ngx-indexed-db.service';\nimport { CreateObjectStore } from './ngx-indexed-db';\n\nexport interface DBConfig {\n\tname: string;\n\tversion: number;\n\tobjectStoresMeta: ObjectStoreMeta[];\n\tmigrationFactory?: () => { [key: number]: (db: IDBDatabase, transaction: IDBTransaction) => void };\n}\n\nexport interface ObjectStoreMeta {\n\tstore: string;\n\tstoreConfig: { keyPath: string; autoIncrement: boolean; [key: string]: any };\n\tstoreSchema: ObjectStoreSchema[];\n}\n\nexport interface ObjectStoreSchema {\n\tname: string;\n\tkeypath: string;\n\toptions: { unique: boolean; [key: string]: any };\n}\n\nexport const CONFIG_TOKEN = new InjectionToken<DBConfig>(null);\n\n@NgModule({\n\tdeclarations: [],\n\timports: [CommonModule]\n})\nexport class NgxIndexedDBModule {\n\tstatic forRoot(dbConfig: DBConfig): ModuleWithProviders<NgxIndexedDBModule> {\n\t\treturn {\n\t\t\tngModule: NgxIndexedDBModule,\n\t\t\tproviders: [NgxIndexedDBService, { provide: CONFIG_TOKEN, useValue: dbConfig }]\n\t\t};\n\t}\n}\n"],"names":["ObjectStoreMeta","ObjectStoreSchema"],"mappings":"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"}