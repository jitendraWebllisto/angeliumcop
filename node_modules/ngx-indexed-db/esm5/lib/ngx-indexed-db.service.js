/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { CONFIG_TOKEN } from './ngxindexeddb.module';
import { openDatabase, DBMode, CreateObjectStore } from './ngx-indexed-db';
import { createTransaction, optionsGenerator, validateBeforeTransaction } from '../utils';
var NgxIndexedDBService = /** @class */ (function () {
    function NgxIndexedDBService(dbConfig) {
        this.dbConfig = dbConfig;
        if (!dbConfig.name) {
            throw new Error('NgxIndexedDB: Please, provide the dbName in the configuration');
        }
        if (!dbConfig.version) {
            throw new Error('NgxIndexedDB: Please, provide the db version in the configuration');
        }
        CreateObjectStore(dbConfig.name, dbConfig.version, dbConfig.objectStoresMeta, dbConfig.migrationFactory);
    }
    Object.defineProperty(NgxIndexedDBService.prototype, "currentStore", {
        set: /**
         * @param {?} _currentStore
         * @return {?}
         */
        function (_currentStore) {
            this._currentStore = _currentStore;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @template T
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    NgxIndexedDBService.prototype.add = /**
     * @template T
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    function (value, key) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            openDatabase(_this.dbConfig.name, _this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            function (db) {
                /** @type {?} */
                var transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, _this._currentStore, reject, resolve));
                /** @type {?} */
                var objectStore = transaction.objectStore(_this._currentStore);
                /** @type {?} */
                var request = objectStore.add(value, key);
                request.onsuccess = (/**
                 * @param {?} evt
                 * @return {?}
                 */
                function (evt) {
                    key = evt.target.result;
                    resolve(key);
                });
            }));
        }));
    };
    /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    NgxIndexedDBService.prototype.getByKey = /**
     * @template T
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            openDatabase(_this.dbConfig.name, _this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            function (db) {
                /** @type {?} */
                var transaction = createTransaction(db, optionsGenerator(DBMode.readonly, _this._currentStore, reject, resolve));
                /** @type {?} */
                var objectStore = transaction.objectStore(_this._currentStore);
                /** @type {?} */
                var request = objectStore.get(key);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    resolve(((/** @type {?} */ (event.target))).result);
                });
                request.onerror = (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    reject(event);
                });
            }));
        }));
    };
    /**
     * @template T
     * @param {?} id
     * @return {?}
     */
    NgxIndexedDBService.prototype.getByID = /**
     * @template T
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            openDatabase(_this.dbConfig.name, _this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            function (db) {
                validateBeforeTransaction(db, _this._currentStore, reject);
                /** @type {?} */
                var transaction = createTransaction(db, optionsGenerator(DBMode.readonly, _this._currentStore, reject, resolve));
                /** @type {?} */
                var objectStore = transaction.objectStore(_this._currentStore);
                /** @type {?} */
                var request;
                request = objectStore.get(+id);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    resolve((/** @type {?} */ (((/** @type {?} */ (event.target))).result)));
                });
            }));
        }));
    };
    /**
     * @template T
     * @return {?}
     */
    NgxIndexedDBService.prototype.getAll = /**
     * @template T
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            openDatabase(_this.dbConfig.name, _this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            function (db) {
                validateBeforeTransaction(db, _this._currentStore, reject);
                /** @type {?} */
                var transaction = createTransaction(db, optionsGenerator(DBMode.readonly, _this._currentStore, reject, resolve));
                /** @type {?} */
                var objectStore = transaction.objectStore(_this._currentStore);
                /** @type {?} */
                var result = [];
                /** @type {?} */
                var request = objectStore.getAll();
                request.onerror = (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    reject(e);
                });
                request.onsuccess = (/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var ResultAll = _a.target.result;
                    resolve((/** @type {?} */ (ResultAll)));
                });
            }));
        }));
    };
    /**
     * @template T
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    NgxIndexedDBService.prototype.update = /**
     * @template T
     * @param {?} value
     * @param {?=} key
     * @return {?}
     */
    function (value, key) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            openDatabase(_this.dbConfig.name, _this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            function (db) {
                validateBeforeTransaction(db, _this._currentStore, reject);
                /** @type {?} */
                var transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, _this._currentStore, reject, resolve));
                /** @type {?} */
                var objectStore = transaction.objectStore(_this._currentStore);
                transaction.oncomplete = (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    resolve(event);
                });
                objectStore.put(value, key);
            }));
        }));
    };
    /**
     * @param {?} key
     * @return {?}
     */
    NgxIndexedDBService.prototype.deleteRecord = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            openDatabase(_this.dbConfig.name, _this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            function (db) {
                validateBeforeTransaction(db, _this._currentStore, reject);
                /** @type {?} */
                var transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, _this._currentStore, reject, resolve));
                /** @type {?} */
                var objectStore = transaction.objectStore(_this._currentStore);
                /** @type {?} */
                var request = objectStore.delete(key);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    resolve(event);
                });
            }));
        }));
    };
    /**
     * @return {?}
     */
    NgxIndexedDBService.prototype.clear = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            openDatabase(_this.dbConfig.name, _this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            function (db) {
                validateBeforeTransaction(db, _this._currentStore, reject);
                /** @type {?} */
                var transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, _this._currentStore, reject, resolve));
                /** @type {?} */
                var objectStore = transaction.objectStore(_this._currentStore);
                objectStore.clear();
                transaction.oncomplete = (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    resolve();
                });
            }));
        }));
    };
    /**
     * @param {?} key
     * @return {?}
     */
    NgxIndexedDBService.prototype.delete = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            openDatabase(_this.dbConfig.name, _this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            function (db) {
                validateBeforeTransaction(db, _this._currentStore, reject);
                /** @type {?} */
                var transaction = createTransaction(db, optionsGenerator(DBMode.readwrite, _this._currentStore, reject, resolve));
                /** @type {?} */
                var objectStore = transaction.objectStore(_this._currentStore);
                objectStore['delete'](key);
            }));
        }));
    };
    /**
     * @param {?} cursorCallback
     * @param {?=} keyRange
     * @return {?}
     */
    NgxIndexedDBService.prototype.openCursor = /**
     * @param {?} cursorCallback
     * @param {?=} keyRange
     * @return {?}
     */
    function (cursorCallback, keyRange) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            openDatabase(_this.dbConfig.name, _this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            function (db) {
                validateBeforeTransaction(db, _this._currentStore, reject);
                /** @type {?} */
                var transaction = createTransaction(db, optionsGenerator(DBMode.readonly, _this._currentStore, reject, resolve));
                /** @type {?} */
                var objectStore = transaction.objectStore(_this._currentStore);
                /** @type {?} */
                var request = objectStore.openCursor(keyRange);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    cursorCallback(event);
                    resolve();
                });
            }));
        }));
    };
    /**
     * @param {?} indexName
     * @param {?} key
     * @return {?}
     */
    NgxIndexedDBService.prototype.getByIndex = /**
     * @param {?} indexName
     * @param {?} key
     * @return {?}
     */
    function (indexName, key) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            openDatabase(_this.dbConfig.name, _this.dbConfig.version).then((/**
             * @param {?} db
             * @return {?}
             */
            function (db) {
                validateBeforeTransaction(db, _this._currentStore, reject);
                /** @type {?} */
                var transaction = createTransaction(db, optionsGenerator(DBMode.readonly, _this._currentStore, reject, resolve));
                /** @type {?} */
                var objectStore = transaction.objectStore(_this._currentStore);
                /** @type {?} */
                var index = objectStore.index(indexName);
                /** @type {?} */
                var request = index.get(key);
                request.onsuccess = (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) {
                    resolve(((/** @type {?} */ (event.target))).result);
                });
            }));
        }));
    };
    NgxIndexedDBService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NgxIndexedDBService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [CONFIG_TOKEN,] }] }
    ]; };
    return NgxIndexedDBService;
}());
export { NgxIndexedDBService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxIndexedDBService.prototype._currentStore;
    /**
     * @type {?}
     * @private
     */
    NgxIndexedDBService.prototype.dbConfig;
}
//# sourceMappingURL=data:application/json;base64,