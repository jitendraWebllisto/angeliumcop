/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NgxIndexedDBService } from './ngx-indexed-db.service';
/**
 * @record
 */
export function DBConfig() { }
if (false) {
    /** @type {?} */
    DBConfig.prototype.name;
    /** @type {?} */
    DBConfig.prototype.version;
    /** @type {?} */
    DBConfig.prototype.objectStoresMeta;
    /** @type {?|undefined} */
    DBConfig.prototype.migrationFactory;
}
/**
 * @record
 */
export function ObjectStoreMeta() { }
if (false) {
    /** @type {?} */
    ObjectStoreMeta.prototype.store;
    /** @type {?} */
    ObjectStoreMeta.prototype.storeConfig;
    /** @type {?} */
    ObjectStoreMeta.prototype.storeSchema;
}
/**
 * @record
 */
export function ObjectStoreSchema() { }
if (false) {
    /** @type {?} */
    ObjectStoreSchema.prototype.name;
    /** @type {?} */
    ObjectStoreSchema.prototype.keypath;
    /** @type {?} */
    ObjectStoreSchema.prototype.options;
}
/** @type {?} */
export var CONFIG_TOKEN = new InjectionToken(null);
var NgxIndexedDBModule = /** @class */ (function () {
    function NgxIndexedDBModule() {
    }
    /**
     * @param {?} dbConfig
     * @return {?}
     */
    NgxIndexedDBModule.forRoot = /**
     * @param {?} dbConfig
     * @return {?}
     */
    function (dbConfig) {
        return {
            ngModule: NgxIndexedDBModule,
            providers: [NgxIndexedDBService, { provide: CONFIG_TOKEN, useValue: dbConfig }]
        };
    };
    NgxIndexedDBModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [],
                    imports: [CommonModule]
                },] }
    ];
    return NgxIndexedDBModule;
}());
export { NgxIndexedDBModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4aW5kZXhlZGRiLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC1pbmRleGVkLWRiLyIsInNvdXJjZXMiOlsibGliL25neGluZGV4ZWRkYi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7QUFHL0QsOEJBS0M7OztJQUpBLHdCQUFhOztJQUNiLDJCQUFnQjs7SUFDaEIsb0NBQW9DOztJQUNwQyxvQ0FBbUc7Ozs7O0FBR3BHLHFDQUlDOzs7SUFIQSxnQ0FBYzs7SUFDZCxzQ0FBNkU7O0lBQzdFLHNDQUFpQzs7Ozs7QUFHbEMsdUNBSUM7OztJQUhBLGlDQUFhOztJQUNiLG9DQUFnQjs7SUFDaEIsb0NBQWlEOzs7QUFHbEQsTUFBTSxLQUFPLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBVyxJQUFJLENBQUM7QUFFOUQ7SUFBQTtJQVdBLENBQUM7Ozs7O0lBTk8sMEJBQU87Ozs7SUFBZCxVQUFlLFFBQWtCO1FBQ2hDLE9BQU87WUFDTixRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUM7U0FDL0UsQ0FBQztJQUNILENBQUM7O2dCQVZELFFBQVEsU0FBQztvQkFDVCxZQUFZLEVBQUUsRUFBRTtvQkFDaEIsT0FBTyxFQUFFLENBQUMsWUFBWSxDQUFDO2lCQUN2Qjs7SUFRRCx5QkFBQztDQUFBLEFBWEQsSUFXQztTQVBZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IE5neEluZGV4ZWREQlNlcnZpY2UgfSBmcm9tICcuL25neC1pbmRleGVkLWRiLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ3JlYXRlT2JqZWN0U3RvcmUgfSBmcm9tICcuL25neC1pbmRleGVkLWRiJztcblxuZXhwb3J0IGludGVyZmFjZSBEQkNvbmZpZyB7XG5cdG5hbWU6IHN0cmluZztcblx0dmVyc2lvbjogbnVtYmVyO1xuXHRvYmplY3RTdG9yZXNNZXRhOiBPYmplY3RTdG9yZU1ldGFbXTtcblx0bWlncmF0aW9uRmFjdG9yeT86ICgpID0+IHsgW2tleTogbnVtYmVyXTogKGRiOiBJREJEYXRhYmFzZSwgdHJhbnNhY3Rpb246IElEQlRyYW5zYWN0aW9uKSA9PiB2b2lkIH07XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0U3RvcmVNZXRhIHtcblx0c3RvcmU6IHN0cmluZztcblx0c3RvcmVDb25maWc6IHsga2V5UGF0aDogc3RyaW5nOyBhdXRvSW5jcmVtZW50OiBib29sZWFuOyBba2V5OiBzdHJpbmddOiBhbnkgfTtcblx0c3RvcmVTY2hlbWE6IE9iamVjdFN0b3JlU2NoZW1hW107XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0U3RvcmVTY2hlbWEge1xuXHRuYW1lOiBzdHJpbmc7XG5cdGtleXBhdGg6IHN0cmluZztcblx0b3B0aW9uczogeyB1bmlxdWU6IGJvb2xlYW47IFtrZXk6IHN0cmluZ106IGFueSB9O1xufVxuXG5leHBvcnQgY29uc3QgQ09ORklHX1RPS0VOID0gbmV3IEluamVjdGlvblRva2VuPERCQ29uZmlnPihudWxsKTtcblxuQE5nTW9kdWxlKHtcblx0ZGVjbGFyYXRpb25zOiBbXSxcblx0aW1wb3J0czogW0NvbW1vbk1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgTmd4SW5kZXhlZERCTW9kdWxlIHtcblx0c3RhdGljIGZvclJvb3QoZGJDb25maWc6IERCQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ3hJbmRleGVkREJNb2R1bGU+IHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0bmdNb2R1bGU6IE5neEluZGV4ZWREQk1vZHVsZSxcblx0XHRcdHByb3ZpZGVyczogW05neEluZGV4ZWREQlNlcnZpY2UsIHsgcHJvdmlkZTogQ09ORklHX1RPS0VOLCB1c2VWYWx1ZTogZGJDb25maWcgfV1cblx0XHR9O1xuXHR9XG59XG4iXX0=